@class article\

@use ./images/\

@title Physics Simulations\
@author Edoardo Takanen\
@date\

@document {
    @maketitle\

    @center {
        @LARGE\ Abstract
    }
    
    One of the subjects I am more interested in high school is without a doubt physics.
    We started with the concept of linear motion, then proceeding with things more "complex" and inarguably more interesting.\\
    Since doing just some exercises for school test is not really that interesting,
    I decided to start developing physics simulations, to challenge myself and see how many things I learn at school I can implement here.

    @newpage\
    @tableofcontents\

    @newpage\

    @section (label=sec:introduction) Introduction\

    These simulations will just be focusing 2D.\\
    I chose to develop this using the C++ programming language and the graphics library @href https://www.sfml-dev.org/ SFML\,
    a useful library that provides graphics-related implementations and allows us to focus only on the physics and how what we render on the screen will behave, 
    thus attempting to implement by myself everything I need related to the subject (collision detection, motion, friction etc.).\\
    C++ offers a very good standard library to start from as well as low level and memory management, these tools will be very useful for the simulations to run fast, but at the same time it means more hard and challenging code to write.\\
    I will also be using a library for rendering real time plots of our simulations, which can help us to analyze data while the program is running.
    The library I am talking about is @href https://root.cern/ ROOT\,
    a powerful open-source data analysis framework coming from the CERN.

    @newpage\

    @section (label=sec:the-engine) The Engine\

    The first question obviously is: how can we structure our simulations' engine?\\
    I would like to follow the idea of how the
    @href https://unity.com/ Unity engine\ $$fs$$ works.
    The idea I have in mind is not only to create this physics engine, but I also want to build an API from which people can extend and experiment the engine.
    So the plan is to give people the tools to create something and learn, without having to start from scratch again, pretty much like the SFML library.\\
    A good way to start is having in mind what things we need and how to structure the whole project, let's define some of the basic stuff that the engine will have:

    @list {
        @item {
            Simulation class\\
            The main class that handles entities and everything that is needed for our simulations
        }
        @item {
            Entities\\
            The basic class that let us instantiate things
        }
        @item {
            Objects\\
            More complex class, extends and handles specific cases for some entities (rectangles, circles, ropes etc.)
        }
        @item {
            Behaviors\\
            The ones that give some abilities and properties to our entities
        }
        @item {
            Graphs manager\\
            The class that helps us plotting data
        }
    }

    @figure (H) {
        @graphic (width=1$$textwidth$$) StructureGraph\
        @centering\
        @label fig:enginestructure\
    }

    @newpage\

    We will take for granted adding vectors, which is just implementing every operator (sum, subtraction, dot product etc.).\\
    Now we are going to look at the main function that runs a simple (and empty for now) simulation, let's write it with pseudo-code for simplicity.

    @code (language=C++, label=lst:main.cpp) ./code/main.txt\

    \\
    This is a very simplified version of what we are doing every frame, I will discuss later about the choice of this approach.
    In the very first section of the main function, we are declaring the principal variables: the window (an SFML class for rendering meshes), the graphsManager (the class for plotting graphs) and the simulation (what will handle everything, from image above @ref fig:enginestructure\). They will be discussed better later.
    Also before the while loop we prepare the simulation with the simulation::onCreate function.\\
    Next, we are launching the simulation forever until the program is stopped.\\
    In the loop, we:
    @list {
        @item {
            First tell the simulation that a new frame is starting (simulation::onUpdate).
        }
        @item {
            Update the entities (discussed in @ref sec:entity\).
        }
        @item {
            Plot our custom graphs (simulation::onDrawGraphs)
        }
        @item {
            Render everything on the screen and inform the simulation we have drawn everything (simulation::onRender).
        }
    }

    @section (label=sec:simulation) Simulation\

    As I said above, I would like to build a usable API out of this engine.\\
    To make this, I created the Simulation class, which can be extended with your code:

    @code (language=C++, label=lst:simulation.cpp) ./code/simulation.txt\

    For this paper we will focus on the event functions you can see above.

    @subsection (label=subsec:oncreate) onCreate\
    Event called at the very beginning of the program, before starting to build the first frame. It is usually used to create and spawn the entities used in the simulation.
    @subsection (label=subsec:onevent) onEvent\
    Event called when a key is pressed.
    @subsection (label=subsec:onupdate) onUpdate\
    Event called when the program is starting to build each frame.
    @subsection (label=subsec:ondrawgraphs) onDrawGraphs\
    Event called for plotting some data.
    @subsection (label=subsec:onrender) onRender\
    Event called after the frame has been fully drawn, it can be used to add additional things on the screen, like a text.

    @section (label=sec:entity) Entity\

    The entity class is the primary structure for instantiating and managing things in the simulation.

    @code (language=C++, label=lst:entity.cpp) ./code/entity.txt\

    These are all the methods every entity needs.
    I will talk about behaviors later, now, before looking at the 3 main phases of each entity, I want to discuss the difference between the two events update and fixed update.

    @subsection (label=subsec:update-vs-fixed-update) update vs fixed update\

    @figure (H) {
        @graphic (width=1$$textwidth$$) UpdatevsFixedUpdate\
        @centering\
        @label fig:updatevsfixed\
    }
    Basically, update runs once per frame, while fixed-update can run once, zero, or several times per frame, depending on how many physics frames per second are set in the time settings, and how fast/slow the frame rate is. The last one ends up being more relatable because even if the program starts slowing down for a frame, the fixed update loops will always be stable. As you can see in image @ref fig:updatevsfixed\ fixed update runs at fixed and equal intervals, unlike update.\\
    For this reason fixed update should be used when applying physics-related functions, because you know it will be executed exactly in sync with the physics engine itself.\\
    Meanwhile, update can vary out of step with the physics engine depending on how much it takes to render the frame.
    If it was used for physics, it would give different results every time!

    @subsection (label=subsec:update) update\

    For the reason explained above, since update is not recommended for physics functions, the method is not used, but I wanted to add it for completeness.

    @subsection (label=subsec:fixed-update) fixed update\

    Instead, fixed update is very used since everything here is related to physics.
    I decided to break this out and differentiate the fixed update process into 3 phases:

    @subsubsection beforeFixedUpdate\

    This method is the first called, and it is used to update variables like the velocity in the RigidBody behavior.\\
    For example, we make sure gravity is applied to our velocity each time.

    @subsubsection checkCollisions\

    We then check for collisions for each entity in the simulation and resolve them.
    If a collision happens, we may want to apply some impulses to separate those entities.

    @subsubsection fixedUpdate\

    Last of all, we update everything like the position or rotation.

    @subsection (label=subsec:render) render\

    The render function is the last function called every frame.
    With this we just render our entities on the screen.

    @newpage\

    @subsection (label=subsec:object) Object\

    The object class is a built-in structure offered by the engine.\\
    It already has a mesh sprite, a collision shape and a rigidbody.

    @code (language=C++, label=lst:object) ./code/object.txt\

    Notice that the class have a Mesh property and a CollisionShape one. This means a single object can have a sprite rendered on the screen different from the collision shape.

    @newpage\

    @section (label=sec:behavior) Behavior\

    Behaviors, as I said in the introduction, are the components that give some properties to our entities.
    This is the abstract class for a behavior:

    @code (language=C++, label=lst:behavior.cpp) ./code/behavior.txt\

    I wanted to use the same approach used by unity, so behaviors can be added to entities using the **AddBehavior()** function, where the new value is stored in an array of Behavior pointers, and can be retrieved with the
    **TryGetBehavior()** function. (see @ref sec:entity\)
    
    @newpage\

    @subsection (label=subsec:rigidbody) Rigidbody\

    The RigidBody component is an implementation of physics for our entities.
    The two main functions are the followings:

    @subsubsection Collision Detection\

    Collision detection is used to check if an object is colliding with another object
    This part will not cover the two collision detection algorithms (aabb/sat).
    I will talk about them in @ref subsec:collisionshape\.\\
    The two types of collision detection I have implemented are:

    @list {
        @item {
            Discrete
        }
        @item {
            Continuous
        }
    }

    @subsubsection Discrete\

    Discrete collision detection simply uses aabb/sat algorithm and detects if there is a collision on the position where the object wants to go.

    @code (language=C++, label=lst:discrete.cpp) ./code/discrete.txt\

    @paragraph Pros and Cons\
    @list {
        @item {
            **Pros**\\
            Low computational cost
        }
        @item {
            **Cons**\\
            Tunneling
        }
    }

    @newpage\

    @subsubsection What's tunneling?\

    @figure (H) {
        @graphic TunnelingProblem\
        @centering\
        @caption The tunneling problem\
        @label fig:tunneling\
    }

    Tunneling is when an object moves so fast from one frame to another that
    he completely passes another object.

    @list {
        @item {
            Make sure an object doesn't move too fast
        }
        @item {
            Increase frames per second
        }
        @item {
            Continuous collision detection
        }
        @item {
            Swept volume
        }
    }

    @subsubsection Continuous\

    @figure (H) {
        @graphic (width=.5$$textwidth$$) ContinuousCollision\
        @centering\
        @caption Continuous collision detection\
        @label fig:continuous\
    }

    Continuous collision detection tries to check for every position between start and end, so that we know the exact position where two object are colliding.\\

    @code (language=C++, label=lst:continuous) ./code/continuous.txt\

    @paragraph Pros and Cons\

    @list {
        @item {
            **Pros**\\
            Precise collision detection
        }
        @item {
            **Cons**\\
            Higher computation cost
        }
    }

    @subsubsection Swept volume\

    @figure (H) {
        @graphic (width=1$$textwidth$$) SweptVolume\
        @centering\
        @caption Swept volume\
        @label fig:sweptvolume\
    }

    Swept volume is the volume of the object from one frame to the next.
    With this method, we simply check the collisions considering the whole area.

    @paragraph Pros and Cons\
    @list {
        @item {
            **Pros**\\
            Low computation cost
        }
        @item {
            **Cons**\\
            We do not know the precise position where the collision happened
        }
    }

    @subsubsection Velocity management\

    Velocity is used to calculate the next position of an object.\\
    **Note:** velocity can be assigned from its variable or can be updated using the **addForce()** function.\\
    Velocity is updated on fixed update, this also includes gravity.

    @subsubsection Collision response\

    The last thing (but not the least important) the rigidbody does for us is collision response. What happens the an object collides with another object?\\
    This is what the **checkCollisions** function does, it checks for collisions and applies impulses to separate these objects.\\
    \\
    Summing up, therefore, we apply:

    @list {
        @item {
            traslational impulses
        }
        @item {
            rotational impulses
        }
        @item {
            friction
        }
    }

    For this we will obviously assume we have detected that two objects are colliding and we have all the information we need, summed up with these structures:

    @code (language=C++, label=lst:collidingstruct) ./code/colliding.txt\

    I will talk more about this in @ref subsec:collisionshape\.
    @paragraph Traslational impulses\\
    Assuming that there is no friction, the impulse we will generate will be entirely in the normal direction.
    This impulse will be only calculated if the two objects are trying to overlap, we check this calculating the relative velocity along the normal:
    @math {
        v^{AB} = (v^{AP} - v^{BP}) $$dot$$ n
    }
    Where *A* and *B* are the two objects, *P* is the point of contact and *n* is the normal of the collision.
    If the dot product is greater than 0, that means the velocities are already making the objects go away from each other, so we do not need to calculate the impulse.\\
    We can express the impulse with a scalar *j* times the normal of the collision.
    Newton's Third Law of equal and opposite forces says that the
    impulse for A is *j***n**, while the impulse felt by B is simply -*j***n**,
    the same and opposite impulse.\\

    The formula for calculating *j* is the following:
    @math {
        j = @frac {
            {
                -(1 + e) v^{AB}
            }
            {
                n $$dot$$ n (
                    @frac {
                        {
                            1
                        }
                        {
                            m^A
                        }
                    }
                    +
                    @frac {
                        {
                            1
                        }
                        {
                            m^B
                        }
                    }
                )
            }
        }
    }

    *e* is our restitution value, it is a number clamped between 0 and 1, where 0 is when two objects just crash, and 1 is when they bounce.
    How can we decide what value we have to pick?
    This restitution value is based on the material of the object, so every object will have its own variable. When resolving a collision we will just get the least value between the twos.
    \\
    *m@superscript A\* and *m@superscript B\* are the masses of the two objects, notice how in this equation we need the inverse of the mass.
    That brings us to a consideration I actually discovered while doing my researches and that many physics engines did. How can we simulate big masses like the Earth?\\
    We could just put a big floating number like $2@superscript 31\- 1$, but with floating numbers imprecisions, that would not turn up to be perfect.
    So people came up with this idea, giving a mass of 0, so that every impulse or force applied, will be multiplied by 0, resulting to no impulse at all.
    The last problem to solve is the inverse of the mass, 1 over 0 will result in an error.\\
    Physics engines figured out they could just save two variables for each rigidbody, the mass and the inverse of the mass, adjusting these values manually for masses of 0, so assigning zero to both variables.\\
    \\
    Now that we know *j*, we can just update the velocities:

    @math {
        v^A_f = v^A_i + @frac {{j}{m^A}} @latex {\textbf{n}\}
    }
    @math {
        v^B_f = v^B_i + @frac {{j}{m^B}} @latex {\textbf{n}\}
    }

    @paragraph Adding rotations\\

    Looking at how we can add rotations too, it really looks very similar to the previous equations.
    The same way we are calculating linear impulses that will change the velocities,
    for rotations, we will need to calculate angular impulses that will change the angular velocities.\\

    First, we will have to change the equation for the relative velocity, since we will need to also include the initial angular velocities.

    @math {
        v^{AB} = ((v^{AP} + v_a^B) - (v^{BP} + v_a^A)) $$dot$$ n
    }

    Having:
    @equations {
        v_a^A & = r_$$perp$$^{AP} \\
        v_a^B & = r_$$perp$$^{BP}
    }
    Where the two *r* are the orthogonals of the directions **AP** and **BP**.
    We then update our expression to calculate *j*:

    @math {
        j = @frac {
            {
                -(1 + e) v^{AB}
            }
            {
                n $$dot$$ n (
                    @frac {{1}{m^A}}
                    +
                    @frac {{1}{m^B}}
                )
                + @frac {
                    {
                        (r_$$perp$$^{AP} $$dot$$ n)^2
                    }
                    {I^A}
                }
                + @frac {
                    {
                        (r_$$perp$$^{BP} $$dot$$ n)^2
                    }
                    {I^B}
                }
            }
        }
        @label eq:jscalar\
    }

    Where *I@superscript A\* and *I@superscript B\* are the two momentums of inertia.\\
    These are calculated when the rigidbody is created and a mass is given.
    Obviously the same as for the mass happens (for the same reason) for the moment of inertia, which means that there are two variables: the intertia and the inverse of the inertia.
    \\
    Lastly, as for the velocities, we update the angular velocities:

    @math {
        @latex {\omega}^A_f = @latex {\omega}^A_i + @frac {
            {r_$$perp$$^{AP} $$dot$$ jn}
            {I^A}
        }
    }
    @math {
        @latex {\omega}^B_f = @latex {\omega}^B_i + @frac {
            {r_$$perp$$^{BP} $$dot$$ jn}
            {I^B}
        }
    }

    @paragraph Friction\\

    If we actually tried to run our simulations now, we would see that the objects spawned keep moving slowly, like they are on an icy surface.
    That is because we have not implemented friction yet.\\
    But first, what is friction?\\
    Friction is the force that is resisting the motion of two objects sliding against each other. For our simulations this force will make our entities stop after some time.
    Let's see what will be the direction of our friction first.\\

    @figure (H) {
        @graphic (width=1$$textwidth$$) FrictionDirection\
        @centering\
        @label fig:frictiondirection\
    }

    Here we have a situation where two entities have just collided, let's assume the red circle is a dynamic object (the one that is moving) and the yellow square is a static object like a floor.\\
    Before hitting the floor, the circle was moving towards it with an initial velocity. After the collision, the direction of the velocity is flipped according to the normal. The friction instead will be tangent to the normal direction and opposite to the final velocity.\\
    Therefore we calculate the tangent:

    @math {
        t = v^{AB} - (v^{AB} $$dot$$ n)n
    }

    *note that the relative velocity v@superscript AB\$$fs$$is the final velocity in the image, that is because friction is calculated after separating the two entities apart*\\
    Similar to the previous calculations for impulses, we now calculate the *j* scalar for friction:

    @math {
        jt = - @frac {
            {
                v^{AB} $$dot$$ t
            }
            {
                (
                    @frac {{1}{m^A}}
                    +
                    @frac {{1}{m^B}}
                )
                + @frac {
                    {
                        (r_$$perp$$^{AP} $$dot$$ t)^2
                    }
                    {I^A}
                }
                + @frac {
                    {
                        (r_$$perp$$^{BP} $$dot$$ t)^2
                    }
                    {I^B}
                }
            }
        }
    }

    Very similar to the previous one, except that we are using the tangent instead of the normal.\\
    *note the minus at the beginning, because the impulse will be opposite to the velocity*\\
    One last thing we need to do before calculating and applying the final friction impulses is using Coulomb's law that clamps a friction force that is too big.
    Coulombs's law says that the friction force *F@subscript f\* must be less or equal than the normal force *F@subscript n\* times a static friction constant
    @math {
        F_f @latex {\leq} F_n $$dot$$ @latex {\mu}
    }
    And with our variables we can rewrite this as:
    @math {
        jt @latex {\leq} j $$dot$$ sf @label eq:coulomblaw\
    }
    Where *jt* is the scalar we have calculated before and *j* is the scalar calculated back in @latex {\eqref{eq:jscalar}} for the motion impulse.\\
    That also leads us to declaring two important values: the static friction constant and the dynamic friction constant.
    In real life, these values really depend on the materials of the two objects.\\
    In the future, I would like to create a list of some materials with their real constants for better results. However, for now I will just have a custom static and dynamic friction constant for each RigidBody 
    (RigidBody::staticFriction and RigidBody::dynamicFriction) and just calculate the average.

    @math {
        sf = @frac {
            {
                SF_A + SF_B
            }
            {
                2
            }
        }
    }
    @math {
        df = @frac {
            {
                DF_A + DF_B
            }
            {
                2
            }
        }
    }

    So if condition @latex { \eqref{eq:coulomblaw} }\ is met, the friction impulse will be
    @math {
        i = jt * t
    }
    Otherwise, Coulomb's law states that the friction will be
    @math {
        i = -j * t * df
    }
    Finally, we can add these impulses to the velocities and angular velocities of the two objects, like we did before.

    @newpage\

    @subsection (label=subsec:collisionshape) CollisionShape\

    The CollisionShape class has the information about the shape for collisions and the algorithms of collision detection.
    There are different algorithms based on the type of shape we have, that is why the CollisionShape class is abstract and has different implementations.

    @code (language=C++, label=lst:collisionshape) ./code/collisionshape.txt\

    These are the methods to override for extending the class.
    @list {
        @item {
            **getType**\\
            returns the type of shape (circle or rectangle for now)
        }
        @item {
            **getBounds**\\
            returns the SFML shape
        }
        @item {
            **getSize**\\
            returns the size of the shape, needs to be interpreted based on the shape.\\
            For circles the radius is the length of the vector.\\
            For rectangles the x and y sizes are just the vector's components
        }
        @item {
            **aabbCollision**\\
            contains the logic for the AABB algorithm, returns a boolean whether the two objects collide or not.
        }
        @item {
            **satCollision**\\
            contains the logic for the SAT algorithm, returns a structure containing all the information of the collision.
        }
    }

    @subsubsection (label=subsubsec:aabbalgorithm) AABB algorithm\

    @figure (H) {
        @graphic (width=1$$textwidth$$) AABBAlgorithm\
        @centering\
        @label fig:aabbexplanation\
    }
    AABB stands for Axis-Aligned Bounding Box.\\
    This method only works with rectangles or squares and only if they're axis-aligned.\\
    If two objects are colliding, all of these conditions will be true:
    @math {
        @split {
            other.left      & @latex {\leq} object.right\\
            other.right     & @latex {\geq} object.left\\
            other.top       & @latex {\geq} object.bottom\\
            other.bottom    & @latex {\leq} object.top\\
        }
    }
    *note that this algorithm is implemented in the project but never used, because since we are also dealing with angular velocities and rotations, this method will not work*

    @subsubsection (label=subsubsec:satalgorithm) SAT algorithm\

    @figure (H) {
        @graphic (width=.65$$textwidth$$) SATAlgorithm\
        @centering\
        @label fig:satexplanation\
    }

    SAT stands for Separating Axis Theorem.\\
    This is a much better algorithm (but also more expensive) than AABB because it works with **every convex** shape and **every rotation**.\\
    \\
    What we basically do is make a projection of both shapes on every axis.
    If all the projections overlap, the objects are colliding.\\
    As we saw in @ref lst:collidingstruct\, collision resolution needs some more information rather than just a boolean value that says if a collision happened.

    @code (language=C++, label=lst:collidingstruct) ./code/colliding.txt\

    Penetration is the greatest overlap encountered, while overlap is the least overlap, these values are used to correct the visible bug of two objects being one over the other.

    @figure (H) {
        @graphic (width=1.05$$textwidth$$) NormalsExplanation\
        @centering\
        @label fig:normalsexplanation\
    }
    The normal is the normalized direction of the collision.

    @subsubsection (label=subsubsec:circlepolygon) Circle-Polygon algorithm\

    To check if a circle is colliding with a convex polygon, we iterate through every vertex of the polygon and get the least distance between a vertex and the center of the circle.
    If the least distance is less or equal than the circle's radius, the two objects are colliding.

    @subsection (label=subsec:mesh) Mesh\

    The Mesh class is a wrapper for SFML's shapes, it represents the sprite that will be rendered on the screen (NOT the collision bounds).

    @code (language=C++, label=lst:mesh) ./code/mesh.txt\

    @newpage\

    @section (label=sec:graphsmanager) GraphsManager\

    The GraphsManager is a wrapper for CERN's library: ROOT.\\
    It simplifies the process of plotting real-time graphs for analyzing data from the simulation, whether for debugging or not.\\

    @code (language=C++, label=lst:graphsmanager) ./code/graphsmanager.txt\

    Here's an example of building some graphs\\
    *note that the simulation class already has a graphManager property*

    @code (language=C++, label=lst:graphsexample) ./code/graphsexample.txt\
}